---
title: "Finding interfacility tranfers using r (sf)" 
format:
    html:
        toc: true
        toc-depth: 3
        toc-location: left
        html-math-method: katex
        number-sections: true
        code-fold: true
        df-print: kable
        warning: false
---

## Outline
Play around with some sample data. Plot some interesting flights. Infer if the flights are at a helipad.

```{r}
library(ggplot2)
library(rnaturalearth)
library(sf)
library(tidyverse)
library(tmap)
```

## Plot some flights
```{r}
# Load some sample data
# First, two well behaved flights from a sending center to a receiving center
well_behaved_a <-"~/PhD/hemspy/data/sample-data/hems-examples/DFL5710_35200a2b.csv"
well_behaved_b <-"~/PhD/hemspy/data/sample-data/hems-examples/SWV5960_3526909c.csv"
# Next, a bunch of trickier flights
tricky_a <- "~/PhD/hemspy/data/sample-data/hems-examples/SWV5850_345f09a8.csv"
tricky_b_part_1 <-  "~/PhD/hemspy/data/sample-data/hems-examples/SWV5850_34bac707.csv"
tricky_b_part_2 <- "~/PhD/hemspy/data/sample-data/hems-examples/SWV5850_34bad6ce.csv"

tricky_c_part_1 <- "~/PhD/hemspy/data/sample-data/hems-examples/DFL5940_34f7c0ea.csv"
tricky_c_part_2 <- "~/PhD/hemspy/data/sample-data/hems-examples/DFL5940_34f82b91.csv"

# Define location of some helipads at sending and receving hospitals
hudiksvall <- c(61.7304, 17.0996) ## sending hospital
akademiska <- c(59.8472, 17.6402) ## this is a receiving center
arna <- c(59.8920, 17.6066) ## this is an aiport
karolinska <- c(59.3493, 18.0319) ## this is a receiving center
torsby <- c(60.1367, 12.9974) ## sending hospital
orebro <- c(59.2748, 15.2288) ## this is a receiving center
sunderbyn <- c(65.67241724908286, 21.935790886203712) ## sending hospital
kalix <- c(65.85566778285997, 23.171565979697636) ## sending hospital
umea <- c(63.81735866549869, 20.298453547845288) ## sending hospital
falun <- c(60.60763426546648, 15.645371300139645) ## sending hospital
gallivare <- c(67.13107231727535, 20.682936085413385) ## sending hospital
solleftea <- c(63.17472146034687, 17.2314090459214) ## sending hospital
ostersund <- c(63.191907852275854, 14.63084350106227)

airports <- tibble(
  airport = c("hudiksvall", "akademiska", "arna", "karolinska", "torsby", "orebro", "sunderbyn", "kalix", "umea", "falun", "gallivare", "solleftea", "ostersund"),
  Latitude = c(hudiksvall[1], akademiska[1], arna[1], karolinska[1], torsby[1], orebro[1], sunderbyn[1], kalix[1], umea[1], falun[1], gallivare[1], solleftea[1], ostersund[1]),
  Longitude = c(hudiksvall[2], akademiska[2], arna[2], karolinska[2], torsby[2], orebro[2], sunderbyn[2], kalix[2], umea[2], falun[2], gallivare[2], solleftea[2], ostersund[2])
)

# Transfer lat/lon values to "simple features"
airports <- st_as_sf(airports, coords = c("Longitude", "Latitude"), crs=4326)

# Define "bounding circles" around helipads,
airports$zone <- st_buffer(airports, dist=500)
```

### A well behaved sample flight
This guy is going from Hudiksvall to Karolinska. First a quick look at what the dataset looks like.

```{r}
flight1 <- read_delim(well_behaved_a, show_col_types = FALSE)
head(flight1)
```
Next, we will transform latitude/longitude to a "simple feature".

```{r}
flight1 <- flight1 %>%
  separate(Position, into=c("Latitude", "Longitude"), sep=",", convert = TRUE)
flight1 <- st_as_sf(flight1, coords = c("Longitude", "Latitude"), crs=4326)
```

Now, let's plot the flight.

```{r}
tmap_mode("view")

flight_map <- tm_basemap("OpenStreetMap") + 
  tm_shape(flight1) + 
  tm_dots(c("Altitude")) +
  tm_shape(airports$zone) +
  tm_borders()

# View the map
flight_map
```

Let's find out if the aircraft is near a helipad at a given point in time.

```{r}
# For a given table of locations, infer if position within boundaries of a helipad
near_airport <- data.frame(st_within(flight1, airports$zone, sparse=FALSE))
names(near_airport) <- airports$airport

# create a single column
near_airport <- near_airport %>%
  rowwise() %>%
  mutate(true_column = if (all(!c_across())) NA_character_ else names(cur_data())[which(c_across() == TRUE)]) %>%
  ungroup() %>%
  select(true_column)

# Add to flight data
flight1$airport <- near_airport$true_column

head(flight1, n=10)
```
If only all flights were this well behaved...

### A trickier flight
Here, the aircraft is flying the route Gällivare Hospital (a sending hospital) -> Gällivare Airport -> Umeå (a receiving hospital). The two legs have separate flight_ids and are thus in separate files. Prior to taking off from the sending hospital it seems as if the aircraft has been on another mission (not plotted here) and landed at the hospital. This could be a case where a patient is loaded at the sending hospital prior to the helicopter flying to the airport for re-fueling (it spends around 15 minutes at the airport) and the proceeding to the receiving university hospital in Umeå. Let's take a look.


```{r}

flight2 <- read_delim(tricky_b_part_1, show_col_types = FALSE)
flight2 <- flight2 %>%
  separate(Position, into=c("Latitude", "Longitude"), sep=",", convert = TRUE)
flight2 <- st_as_sf(flight2, coords = c("Longitude", "Latitude"), crs=4326)

flight3 <- read_delim(tricky_b_part_2, show_col_types = FALSE)
flight3 <- flight3 %>%
  separate(Position, into=c("Latitude", "Longitude"), sep=",", convert = TRUE)
flight3 <- st_as_sf(flight3, coords = c("Longitude", "Latitude"), crs=4326)

tmap_mode("view")

flight_map2 <- tm_basemap("OpenStreetMap") + 
  tm_shape(flight2) + 
  tm_dots(c("Altitude")) +
  tm_shape(flight3) + 
  tm_dots(c("Altitude")) +
  tm_shape(airports$zone) +
  tm_borders()

# View the map
flight_map2
```
This pattern will be quite common for longer transfers (unless the aircraft is refueled *rotor-running*, which is not always the case). By not organizing the data per "flight" (eg. merging all data per aircraft_id), this problem should go away.

### Another tricky flight
Here we are looking at one flight. It starts in the middle of nowhere, probably because ADS-B coverage was lost. It then lands in Sunderbyn (a sending hospital), hangs around for an hour or so (possibly loading a patient or, more likely, unloading a patient and refueling here) before taking of and landing in Kalix (a sending hospital) where it probably picks up a patient for transfer to the receiving center in Umeå.

```{r}

flight4 <- read_delim(tricky_a, show_col_types = FALSE)
flight4 <- flight4 %>%
  separate(Position, into=c("Latitude", "Longitude"), sep=",", convert = TRUE)
flight4 <- st_as_sf(flight4, coords = c("Longitude", "Latitude"), crs=4326)

tmap_mode("view")

flight_map3 <- tm_basemap("OpenStreetMap") + 
  tm_shape(flight4) + 
  tm_dots(c("Altitude")) +
  tm_shape(airports$zone) +
  tm_borders()

# View the map
flight_map3
```

The key here is that you would probably be fine if you only keep track of the positions in relation to helipads. This flight could be dumbed down to 6 rows: first and last point in time at given helipad. This would also allow for easy calculation of flight times if the need arises.

### An even messier flight
Two flights again. Here, again, the first leg starts in the middle of nowhere, possibly due to lack of ADS-B coverage. The helicopter lands at the heliport in Östersund (a sending hospital) which also acts as their base. It hangs around for an hour (refueling? having lunch?). Next, it flies in the direction of Sollefteå (a small town with a sending hospital). The ADS-B signal seems to be lost just outside of town, just as the aircraft has rapidly descended from 2000 ft to 1000 ft. The next flight starts an hour later outside of the town, again at an altitude of 1000 ft and rapidly ascending. This flight ends up at the receiving hospital in Umeå. This most likely a pick-up at the hospital. The flights ending/starting at high altitude probably means that there is poor ADS-B coverage in the area. When the aircraft enters the low altitude phase, receivers far away will be obscured by the terrain and the signal will be lost.

```{r}

flight5 <- read_delim(tricky_c_part_1, show_col_types = FALSE)
flight5 <- flight5 %>%
  separate(Position, into=c("Latitude", "Longitude"), sep=",", convert = TRUE)
flight5 <- st_as_sf(flight5, coords = c("Longitude", "Latitude"), crs=4326)

flight6 <- read_delim(tricky_c_part_2, show_col_types = FALSE)
flight6 <- flight6 %>%
  separate(Position, into=c("Latitude", "Longitude"), sep=",", convert = TRUE)
flight6 <- st_as_sf(flight6, coords = c("Longitude", "Latitude"), crs=4326)

tmap_mode("view")

flight_map4 <- tm_basemap("OpenStreetMap") + 
  tm_shape(flight5) + 
  tm_dots(c("Altitude")) +
  tm_shape(flight6) + 
  tm_dots(c("Altitude")) +
  tm_shape(airports$zone) +
  tm_borders()

# View the map
flight_map4
```

One way of approaching this would be to increase the radius of the bounding box. Now, this will risk finding "false positive landings" of course. Also, it suggests that sensitive search strategy to find landings probably should not include values for altitude or speed in the logic.

An alternative would be to have bigger bounding boxes in small towns with suspected problems with ADS-B coverage. Another way of managing this edge case would be to use time differences between flights somehow. This would increase complexity a bit...

## Ideas moving forward
- Try the same thing in python (geopandas).
- Merge data per aircraft
- Focus to keep track of "movements" between defined helipads? Possibly, expected flight time between all helipads needs to be calculated (geodesic distance in/typical speed). This in order to not classify a flight A->(C)->B as A->B in the case C is not defined in the set of helipads. 

